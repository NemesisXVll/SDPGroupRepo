// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:../data/dev.db" //change location
}

//(N-NOTINJSON / Y-INJSON / E-ENCRYPTION / D-NOENCRYPT)
model User {
  userId           Int                @id @default(autoincrement()) //(D) 
  data             String             @unique //MasterPassword, FName, LName, Email. (As an Encrypted JSON)
  salt             String
  dateCreated      DateTime           @default(now())
  dateUpdated      DateTime           @updatedAt
  picture          Bytes? //(Picture of the user)
  credentials      Credential[]
  securityQuestion SecurityQuestion[]
}

model Credential {
  credentialId Int      @id @default(autoincrement()) //(D)
  serviceName  String
  title        String
  data         String   @unique //Username, Password (As An Encrypted JSON)
  url          String?
  isWeak       Boolean
  dateCreated  DateTime @default(now())
  dateUpdated  DateTime @updatedAt
  serviceType  String   @default("Personal") //"Like 'Personal', 'Social Media', 'Email', 'Banking', etc."
  picture      Bytes? //(Picture of the service)
  isFavourite  Boolean  @default(false)
  trash        Trash?
  User         User     @relation(fields: [userId], references: [userId])
  userId       Int      @unique //Foreign key
}

model SecurityQuestion {
  securityQuestionId Int    @id @default(autoincrement())
  data               String //Question, HashedAnswer (As An Encrypted JSON)
  User               User   @relation(fields: [userId], references: [userId])
  userId             Int    @unique //Foreign key
}

model Trash {
  trashId         Int        @id @default(autoincrement()) @map("trashId")
  dateTempDeleted DateTime   @default(now()) @map("trashDateTempDeleted")
  Credential      Credential @relation(fields: [credentialId], references: [credentialId])
  credentialId    Int        @unique @map("credentialId") //Foreign Key
}
