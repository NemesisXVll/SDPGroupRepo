// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:../data/dev.db" //change location
}

//(N-NOTINJSON / Y-INJSON / E-ENCRYPTION / D-NOENCRYPT)
model USER {
  USER_ID          Int                @id @default(autoincrement()) @map("userId") //(D) 
  USER_DATA        String             @unique @map("userData") //MasterPassword, FName, LName, Email. (As an Encrypted JSON)
  USER_SALT        String             @map("userSalt")
  USER_DATECREATED DateTime           @default(now()) @map("userDataCreated")
  USER_DATEUPDATED DateTime           @updatedAt @map("userDataUpdated")
  USER_PICTURE     Bytes?             @map("userPicture") //(Picture of the user)
  CREDENTIALS      CREDENTIAL[]
  SECURITYQUESTION SECURITYQUESTION[]
}

model CREDENTIAL {
  CREDENTIAL_ID          Int      @id @default(autoincrement()) @map("credentialId") //(D)
  CREDENTIAL_SERVICENAME String   @map("credentialServiceName")
  CREDENTIAL_TITLE       String   @map("credentialTitle")
  CREDENTIAL_DATA        String   @unique @map("credentialData") //Username, Password (As An Encrypted JSON)
  CREDENTIAL_URL         String?  @map("credentialUrl")
  CREDENTIAL_ISWEAK      Boolean  @map("credentialIsWeak")
  CREDENTIAL_DATECREATED DateTime @default(now()) @map("credentialDateCreated")
  CREDENTIAL_DATEUPDATED DateTime @updatedAt @map("credentialDateUpdated")
  CREDENTIAL_SERVICETYPE String   @default("Personal") @map("credentialServiceType") //"Like 'Personal', 'Social Media', 'Email', 'Banking', etc."
  CREDENTIAL_PICTURE     Bytes?   @map("credentialPicture") //(Picture of the service)
  CREDENTIAL_ISFAVOURITE Boolean  @default(false) @map("credentialIsFavourite")
  TRASH                  TRASH?
  USER                   USER     @relation(fields: [USER_ID], references: [USER_ID])
  USER_ID                Int      @unique @map("userId") //Foreign key
}

model SECURITYQUESTION {
  SECURITYQUESTION_ID   Int    @id @default(autoincrement()) @map("securityQuestionId")
  SECURITYQUESTION_DATA String @map("securityQuestionData") //Question, HashedAnswer (As An Encrypted JSON)
  USER                  USER   @relation(fields: [USER_ID], references: [USER_ID])
  USER_ID               Int    @unique @map("userId") //Foreign key
}

model TRASH {
  TRASH_ID              Int        @id @default(autoincrement()) @map("trashId")
  TRASH_DATETEMPDELETED DateTime   @default(now()) @map("trashDateTempDeleted")
  CREDENTIAL            CREDENTIAL @relation(fields: [CREDENTIAL_ID], references: [CREDENTIAL_ID])
  CREDENTIAL_ID         Int        @unique @map("credentialId") //Foreign Key
}
